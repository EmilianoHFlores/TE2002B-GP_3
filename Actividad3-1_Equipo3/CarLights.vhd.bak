library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity CarLights is
   port (clk, rst : in std_logic;
         left, right, interm : in std_logic;
         lLights, rLights : out std_logic_vector(2 downto 0));
end CarLights;

architecture Behavior of CarLights is

-- State types: s0: both off | s1: left directional | s2: right directional | s3: intermittent
type state_type is (s0, s1, s2, s3);
signal present_state, next_state : state_type;
constant clk_time : time := 1s;  

begin

   process(clk, rst)
   begin
      if (rising_edge(clk)) then
         if (rst = '1') then
            -- Initial state
            present_state <= s0;
         else 
            -- State transitions
			present_state <= next_state;
			end if;
		end if;
	end process;
	
    -- Selecting next state
	C1: process(present_state, left, right, interm)
	begin
		case present_state is

            if (interm = '1') then
                next_state <= s3;
            elsif (left = '1') then
                next_state <= s1;
            elsif (right = '1') then
                next_state <= s2;
            else 
                next_state <= s0;
            end if;
				
		end case;
   end process;
	
	C2 : process(present_state, clk)
	begin
	-- State actions
		case present_state is
			when s0 =>
				rLights <= "000";
                lLights <= "000";
					
			when s1 =>
				rLights <= "000";
                lLights <= "001";
                wait for clk_time/2;
                lLights <= "010";
                wait for clk_time/2;
                lLights <= "100";
                wait for clk_time/2;
                lLights <= "000"
                wait for clk_time;
                
            when s2 =>
                lLights <= "000";
                rLights <= "001";
                wait for clk_time/2;
                rLights <= "010";
                wait for clk_time/2;
                rLights <= "100";
                wait for clk_time/2;
                rLights <= "000"
                wait for clk_time;
                
            when s3 =>
                lLights <= "111";
                rLights <= "111";
                wait for clk_time;
                lLights <= "000";
                rLights <= "000";
                
            when others =>
                rLights <= "000";
                lLights <= "000";
		
		end case;
	end process;

end Behavior;